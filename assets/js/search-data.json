{
  
    
        "post0": {
            "title": "Predicting Population Density with Partial Differential Equations",
            "content": "The Data . The following data models a certain population where the density for each age at years 0-49 is known. Currently we are at the end of year 49 and want to predict the population density (as well as the birth rates and death rates for 30 years into the future. . Population data was given to us as an assignment in my Partial Differential Equations class with Dr. Barker at Brigham Young University. We were told to use PDEs to predict the population in future years. We were given the data shown in the graph below. After a discussion with classmates and a lot of hard work, here is the result of the project. . Which PDE should we use? . Where do we start in the process of modeling this data? Since age increases at the same rate as the years pass, we will use the transport equation to model the population. We need to account for death rate, and we will have an initial condition that describes births during that given year. Putting it all together, we will have a differential equation of the form: . $u_t + cu_x = d(t, x)$ . $u(t, 0) = b(t)$ . Where $t$ refers to time in years, and $x$ refers to age. In this example, $d(t, x)$ is the death rate for people of (would be) age $x$ at year $t$. Our initial condition $b(t)$ represents the number of births at year $t$. . In this application, $c = 1$. . Modeling Birth Rate . To model birth rate, we will fit parameters of a function of the form: . $u(t,0) = sum_{i=0}^{99} c_1 cdot gamma(i) cdot u(t-1,i)$ . Here $ gamma$ refers to the Gamma distribution with parameters $a$ and $ theta$ (scale). The intiution behind this function is that for a given year, the number of births will depend on the portion of the population that could give birth in the previous year. . We sum up the portion of each age group that can give birth multiplied by the size of that age group from the prior year. . # collapse-show # We will now do a curve fit import scipy.integrate as integrate from scipy.optimize import curve_fit def birth_func(t, a, scale, c_1): &quot;&quot;&quot; Function we will fit to solve for births &quot;&quot;&quot; x = np.arange(0,100) g = c_1*gamma(a=a, scale=scale).pdf(x) z = Z[t.astype(np.int32),:] return np.sum(g*z, axis=1) # After some changing of the bounds, we have something that converges nicely popt, pcov = curve_fit(birth_func, np.arange(49), Z[1:,0], bounds=([3,0,2], [np.inf, 2, np.inf])) . . We now have the birth rate for a given age group as represented by $c_1 cdot Gamma(a, theta)$ where $c_1 = 2.064$, $a = 116.37$, and $ theta = 0.2$. . Modeling Death Rate . In order to model death rate, we will need to predict those that die from each age group each year. This can be determined by: . $D(t, x) = u(t, x) - u(t-1, x-1)$ . In other words, for a given age group $x$, we want to know how many didn&#39;t make it to the next year. We can fit a function of the form: . $d(t, x) = c_1 cdot beta(x-1) cdot u(t-1, x-1) + c_2$ . Where $ beta$ refers to the Beta distribution with parameters $a$ and $b$. The Beta distbution is built to model the portion that are died by year $t$. . # collapse_show # Get the deaths for each age group over all time deaths = Z[1:,1:] - Z[:-1,:-1] # Create a function to model death using the beta distribution def death_func(t, a, b, c_1, c_2, e): z = Z[int(t),:-1] x = np.arange(99)/103 +.03 g = c_1*beta(a=a, b=b).pdf(x) + c_2 return g*np.squeeze(z) # Fit the function after adjusting the bounds # Here we fit on deaths at year 1 (the 0-th element of the deaths array) # We assume our death function does not change as a function of t popt2, pcov2 = curve_fit(death_func, [0], deaths[0], bounds=([0,0,-np.inf,-np.inf,-np.inf], [.5, .5, np.inf, np.inf, np.inf])) . . We now have the death rate for a given age group as represented by $c_1 cdot Beta(a, b) + c_2$, where $c_1 = -.0424$, $a = .2717$, $b = .2889$ and $c_2 = 0.0092$. We also have the input $x$ transformed by $ frac{x}{103} + .03$. . Setting up a Finite Difference Scheme . In order to predict the population growth for the next 30 years, we need to set up a finite difference scheme and then iterate over each year. . Denote $u(t_n, x_j)$ as $u_j^{n}$ and using forward first-order differences, we have: . $u_x = frac{u_{j+1}^{n} - u_{j}^{n}}{h} = u_{j+1}^{n} - u_{j}^{n}$ . since $h = 1$ and . $u_t = frac{u_{j+1}^{n+1} - u_{j+1}^{n}}{h} = u_{j+1}^{n+1} - u_{j+1}^{n}$. . Thus, our finite difference scheme is represented as: . $u_{j+1}^{n+1} - u_{j+1}^{n} + u_{j+1}^{n} - u_{j}^{n} = u_{j+1}^{n+1} - u_{j}^{n} = d(t,x)$ . Where $d(t,x)$ is the death function defined above. We can rewrite this as: . $u_{j+1}^{n+1} = u_{j}^{n} + d(t_n,x_j)$ . With boundary condition: . $u_{0}^{n+1} = b(t_n)$ . Where $b(t)$ was defined previously as the birth function. We can also model the intial distribution as a decaying exponential function (using a curve fit), but this is not necessary to use it because we already have the initial age data. Nevertheless, we can use it as an initial condition if we want: . $u_{j}^{0} = frac{7}{6}e^{-.05(j + 4)}$ . Prediction . We now iterate through the years and put our model to the test. . # collapse_show # Get our parameters as defined earlier a1 = popt[0] scale = popt[1] c1 = popt[2] a2 = popt2[0] b = popt2[1] c2 = popt2[2] c3 = popt2[3] def predict(start_year, end_year): #Create array to hold the data U = np.zeros((end_year - start_year,100)) # Set the initial condition # Note the start year should something from 0 to 49 U[0,:] = Z[start_year,:] for i in range(end_year - start_year - 1): U[i+1,0] = c1*U[i,:]@gamma(a=a1, scale=scale).pdf(np.arange(100)) # births U[i+1,1:] = U[i,:-1] + (c2*beta(a=a2, b=b).pdf(np.arange(99)/103 + .03) + c3)*U[i,:-1] # rest of population return U . . Total error in the Frobenius Norm: 11.867422480427903 .",
            "url": "https://mood2jam.github.io/portfolio_blog/2020/08/28/Population-Prediction-with-PDEs.html",
            "relUrl": "/2020/08/28/Population-Prediction-with-PDEs.html",
            "date": " • Aug 28, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://mood2jam.github.io/portfolio_blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://mood2jam.github.io/portfolio_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mood2jam.github.io/portfolio_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mood2jam.github.io/portfolio_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}